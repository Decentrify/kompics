package se.sics.kompics.manual.twopc.main;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.PropertyConfigurator;

import se.sics.kompics.Component;
import se.sics.kompics.ComponentDefinition;
import se.sics.kompics.Fault;
import se.sics.kompics.Handler;
import se.sics.kompics.Kompics;
import se.sics.kompics.Start;
import se.sics.kompics.address.Address;
import se.sics.kompics.launch.Topology;
import se.sics.kompics.manual.twopc.event.ApplicationInit;
import se.sics.kompics.manual.twopc.event.CoordinatorInit;
import se.sics.kompics.manual.twopc.event.ParticipantInit;
import se.sics.kompics.manual.twopc.simple.Coordinator;
import se.sics.kompics.manual.twopc.simple.Participant;
import se.sics.kompics.network.Network;
import se.sics.kompics.network.mina.MinaNetwork;
import se.sics.kompics.network.mina.MinaNetworkInit;
import se.sics.kompics.timer.Timer;
import se.sics.kompics.timer.java.JavaTimer;

/**
 * The <code>ExecutionGroup</code> class.
 * 
 */
public class ApplicationGroup extends ComponentDefinition {
	static {
		PropertyConfigurator.configureAndWatch("log4j.properties");
	}
	private static int selfId;
	private static String commandScript;
	Topology topology = Topology.load(System.getProperty("topology"), selfId);

	/**
	 * The main method.
	 * 
	 * @param args
	 *            the arguments
	 */
	public static void main(String[] args) {
		selfId = Integer.parseInt(args[0]);
		commandScript = args[1];

		Kompics.createAndStart(ApplicationGroup.class);
	}

	/**
	 * Instantiates a new assignment0 group0.
	 */
	public ApplicationGroup() {

		// create components
		Component time = create(JavaTimer.class);
		Component network = create(MinaNetwork.class);
		Component coordinator = create(Coordinator.class);
		Component app = create(CommandProcessor.class);

		// handle possible faults in the components
		subscribe(handleFault, time.getControl());
		subscribe(handleFault, network.getControl());
		subscribe(handleFault, coordinator.getControl());
		subscribe(handleFault, app.getControl());

		// XXX test that this topology is the same one generated by Application
		Address self = topology.getSelfAddress();
		Set<Address> neighborSet = topology.getNeighbors(self);

		// used to initialize the coordinator
		Map<Integer,Address> mapParticipantsAddrs = new HashMap<Integer,Address>();
		int pId = 0;
		for (Address addr : neighborSet) {
			pId++;
			Component p = create(Participant.class);
			trigger(new ParticipantInit(self), p.getControl());
			connect(p.getNegative(Network.class), network
					.getPositive(Network.class));
			connect(p.getNegative(Timer.class), time.getPositive(Timer.class));
			mapParticipantsAddrs.put(pId,addr);
		}

		trigger(new MinaNetworkInit(self), network.getControl());

		connect(coordinator.getNegative(Network.class), network
				.getPositive(Network.class));

		connect(coordinator.getNegative(Timer.class), time
				.getPositive(Timer.class));

		connect(network.getNegative(Timer.class), time.getPositive(Timer.class));

		
		
		trigger(new CoordinatorInit(selfId, self, mapParticipantsAddrs), coordinator.getControl());

		trigger(new ApplicationInit(commandScript, neighborSet, self),
				app.getControl());

		trigger(new Start(), app.getControl());

	}

	Handler<Fault> handleFault = new Handler<Fault>() {
		public void handle(Fault fault) {
			fault.getFault().printStackTrace(System.err);
		}
	};
}
