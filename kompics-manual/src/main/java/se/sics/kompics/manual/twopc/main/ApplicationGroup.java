package se.sics.kompics.manual.twopc.main;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.PropertyConfigurator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import se.sics.kompics.Component;
import se.sics.kompics.ComponentDefinition;
import se.sics.kompics.Fault;
import se.sics.kompics.Handler;
import se.sics.kompics.Kompics;
import se.sics.kompics.Start;
import se.sics.kompics.address.Address;
import se.sics.kompics.launch.Topology;
import se.sics.kompics.manual.twopc.Client;
import se.sics.kompics.manual.twopc.client.CommandProcessor;
import se.sics.kompics.manual.twopc.composite.TwoPC;
import se.sics.kompics.manual.twopc.event.ApplicationInit;
import se.sics.kompics.manual.twopc.event.CoordinatorInit;
import se.sics.kompics.network.Network;
import se.sics.kompics.network.mina.MinaNetwork;
import se.sics.kompics.network.mina.MinaNetworkInit;
import se.sics.kompics.timer.Timer;
import se.sics.kompics.timer.java.JavaTimer;

/**
 * The <code>ExecutionGroup</code> class.
 * 
 */
public class ApplicationGroup extends ComponentDefinition {
	static {
		PropertyConfigurator.configureAndWatch("log4j.properties");
	}
	private static int selfId;
	private static String commandScript;
	Topology topology;

	private static final Logger logger = LoggerFactory
	.getLogger(ApplicationGroup.class);

	/**
	 * The main method.
	 * 
	 * @param args
	 *            the arguments
	 */
	public static void main(String[] args) {
		if (args.length != 2)
		{
			System.out.println("Num args should have been 2. Was " + args.length);
			System.exit(-1);
		}
		
		selfId = Integer.parseInt(args[0]);
		commandScript = args[1];

		Kompics.createAndStart(ApplicationGroup.class);
	}

	/**
	 * Instantiates a new assignment0 group0.
	 */
	public ApplicationGroup() {

		String prop = System.getProperty("topology");

		logger.info("Topology filename: " + prop);
		topology = Topology.load(prop, selfId);
		
		// create components
		Component time = create(JavaTimer.class);
		Component network = create(MinaNetwork.class);
		Component leader = create(TwoPC.class);
		Component commandProcessor = create(CommandProcessor.class);

		// handle possible faults in the components
		subscribe(handleFault, time.getControl());
		subscribe(handleFault, network.getControl());
		subscribe(handleFault, leader.getControl());
		subscribe(handleFault, commandProcessor.getControl());

		// XXX test that this topology is the same one generated by Application
		Address self = topology.getSelfAddress();
		Set<Address> neighborSet = topology.getNeighbors(self);

		// used to initialize the coordinator
		Map<Integer,Address> mapParticipantsAddrs = new HashMap<Integer,Address>();
		int pId = 0;
		for (Address addr : neighborSet) {
			pId++;
//			Component participant = create(TwoPC.class);
//			connect(participant.getNegative(Network.class), network
//					.getPositive(Network.class));
//			connect(participant.getNegative(Timer.class), time.getPositive(Timer.class));
//			
//			trigger(new CoordinatorInit(pId, addr, null), participant.getControl());
			// add this participant to the set of participant components
			mapParticipantsAddrs.put(pId,addr);
		}

		trigger(new CoordinatorInit(selfId, self, mapParticipantsAddrs), leader.getControl());
		trigger(new MinaNetworkInit(self), network.getControl());

		connect(leader.getNegative(Network.class), network
				.getPositive(Network.class));
		connect(leader.getNegative(Timer.class), time
				.getPositive(Timer.class));
		connect(commandProcessor.getNegative(Client.class),
				leader.getPositive(Client.class));
		connect(commandProcessor.getNegative(Timer.class), time
				.getPositive(Timer.class));

		trigger(new ApplicationInit(commandScript, neighborSet, self),
				commandProcessor.getControl());
		trigger(new Start(), commandProcessor.getControl());
	}

	Handler<Fault> handleFault = new Handler<Fault>() {
		public void handle(Fault fault) {
			fault.getFault().printStackTrace(System.err);
		}
	};
}
