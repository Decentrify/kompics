/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExperimentWizardPane1.java
 *
 * Created on 07-Aug-2009, 12:11:33
 */
package se.sics.kompics.master.swing.exp;

import java.awt.Component;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.netbeans.spi.wizard.WizardController;
import org.netbeans.spi.wizard.WizardPage;
import se.sics.kompics.master.swing.exp.ExpEntry.ExperimentStatus;
import se.sics.kompics.wan.ssh.Host;

/**
 *
 * @author jdowling
 */
public class ExperimentWizardPanel4b extends WizardPage {

    public final static String NEWLINE = "\n";

    private static Set<Host> availableHosts = new HashSet<Host>();
    HostTableModel bootstrapTableModel = new HostTableModel();

    private int numHosts = 0;

//    NodeListModel nodeListModel = new NodeListModel();
    /** Creates new form ExperimentWizardPane1 */
    public ExperimentWizardPanel4b() {
        super();

        initComponents();

        bootstrapTableModel.addHosts(availableHosts);
        leftTable.setModel(bootstrapTableModel);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMonitor = new javax.swing.JButton();
        leftScrollPane = new javax.swing.JScrollPane();
        leftTable = new javax.swing.JTable();
        rightScrollPane = new javax.swing.JScrollPane();
        monitor = new javax.swing.JTextArea();
        addBootstrap = new javax.swing.JButton();
        rightScrollPane1 = new javax.swing.JScrollPane();
        bootstrap = new javax.swing.JTextArea();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(se.sics.kompics.master.swing.DesktopApplication1.class).getContext().getResourceMap(ExperimentWizardPanel4b.class);
        addMonitor.setText(resourceMap.getString("addMonitor.text")); // NOI18N
        addMonitor.setName("addMonitor"); // NOI18N
        addMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMonitorActionPerformed(evt);
            }
        });

        leftScrollPane.setName("leftScrollPane"); // NOI18N

        leftTable.setModel(bootstrapTableModel);
        leftTable.setName("leftTable"); // NOI18N
        leftTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        leftScrollPane.setViewportView(leftTable);

        rightScrollPane.setName("rightScrollPane"); // NOI18N

        monitor.setColumns(20);
        monitor.setRows(5);
        monitor.setName("monitor"); // NOI18N
        rightScrollPane.setViewportView(monitor);

        addBootstrap.setText(resourceMap.getString("addBootstrap.text")); // NOI18N
        addBootstrap.setName("addBootstrap"); // NOI18N
        addBootstrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBootstrapActionPerformed(evt);
            }
        });

        rightScrollPane1.setName("rightScrollPane1"); // NOI18N

        bootstrap.setColumns(20);
        bootstrap.setRows(5);
        bootstrap.setName("bootstrap"); // NOI18N
        rightScrollPane1.setViewportView(bootstrap);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rightScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBootstrap, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(rightScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)))
                .addGap(45, 45, 45))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {leftScrollPane, rightScrollPane, rightScrollPane1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(leftScrollPane, 0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rightScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(addMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rightScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(addBootstrap, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(162, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {rightScrollPane, rightScrollPane1});

    }// </editor-fold>//GEN-END:initComponents

    private void addMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMonitorActionPerformed

        int[] rows = leftTable.getSelectedRows();


        for (int row : rows) {
            String host = (String) leftTable.getValueAt(row, 0);

            monitor.append(host + NEWLINE);
            numHosts++;
        }
    }//GEN-LAST:event_addMonitorActionPerformed

    private void addBootstrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBootstrapActionPerformed

        int[] rows = leftTable.getSelectedRows();
        for (int row : rows) {
            String host = (String) leftTable.getValueAt(row, 0);
            bootstrap.append(host + NEWLINE);
            numHosts++;
        }
    }//GEN-LAST:event_addBootstrapActionPerformed

    @Override
    protected String validateContents(Component component, Object event) {

        if (monitor.getLineCount() > 1) {
            setForwardNavigationMode(WizardController.MODE_CAN_CONTINUE_OR_FINISH);
            return null;
        }
        return "You must select one host to run the monitor server on";

    }

    public static void setHosts(Set<Host> hosts) {
        for (Host host : hosts) {
            Host h;
            try {
                h = (Host) host.clone();
                availableHosts.add(h);
            } catch (CloneNotSupportedException ex) {
                Logger.getLogger(ExperimentWizardPanel4b.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public static final String getDescription() {
        return "Select servers.";
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBootstrap;
    private javax.swing.JButton addMonitor;
    private javax.swing.JTextArea bootstrap;
    private javax.swing.JScrollPane leftScrollPane;
    private javax.swing.JTable leftTable;
    private javax.swing.JTextArea monitor;
    private javax.swing.JScrollPane rightScrollPane;
    private javax.swing.JScrollPane rightScrollPane1;
    // End of variables declaration//GEN-END:variables
}
